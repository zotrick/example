/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Operations.Histogram;
import Operations.Matrix;
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**
 *
 * @author Juan Eduardo
 */
public class MainWindow extends javax.swing.JFrame {

    File f = new File("C:\\Users\\Juan Eduardo\\Pictures\\Wallpapers_phone\\blue_powder.jpg");
    Image originalImage, processedImage;
    BufferedImage originalImageRedim, processedImageRedim;
    private boolean binban = false;
    JFrame result;
    JLabel resultlbl;
    double[][] kernel;
    int kernelDiv;
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
//        result = new JFrame();
//        result.setLayout(new FlowLayout());
//        result.setSize(200,300);
//        resultlbl=new JLabel();
//        resultlbl.setSize(200, 300);
//        result.add(resultlbl);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        lblresult = new javax.swing.JLabel();
        lbloriginal = new javax.swing.JLabel();
        btncalculateHistogram = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        btnGrayScale = new javax.swing.JButton();
        btnBinRGB = new javax.swing.JButton();
        btnBin = new javax.swing.JButton();
        treshholdmin = new javax.swing.JSlider();
        treshholdmax = new javax.swing.JSlider();
        btnAutoBin = new javax.swing.JButton();
        btnNegative = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        redFilterOp = new javax.swing.JCheckBox();
        greenFilterOp = new javax.swing.JCheckBox();
        blueFilterOp = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        btnLogexpansion = new javax.swing.JButton();
        btnLinExpansion = new javax.swing.JButton();
        expansionValue = new javax.swing.JSlider();
        btnConvolution = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuMatrix = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Original image");

        jLabel2.setText("Proccesed image");

        btnReset.setText("Reset image");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btncalculateHistogram.setText("Histogram");
        btncalculateHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncalculateHistogramActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(73, 73, 73))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReset)
                .addGap(27, 27, 27)
                .addComponent(btncalculateHistogram)
                .addGap(82, 82, 82))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lbloriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblresult, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbloriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addComponent(lblresult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset)
                    .addComponent(btncalculateHistogram)))
        );

        jToolBar1.setBackground(new java.awt.Color(153, 153, 153));
        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);

        btnGrayScale.setText("Grayscale");
        btnGrayScale.setFocusable(false);
        btnGrayScale.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGrayScale.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGrayScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrayScaleActionPerformed(evt);
            }
        });
        jToolBar1.add(btnGrayScale);

        btnBinRGB.setText("Binarize RGB");
        btnBinRGB.setFocusable(false);
        btnBinRGB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBinRGB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBinRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinRGBActionPerformed(evt);
            }
        });
        jToolBar1.add(btnBinRGB);

        btnBin.setText("Binarize");
        btnBin.setFocusable(false);
        btnBin.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBin.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBinActionPerformed(evt);
            }
        });
        jToolBar1.add(btnBin);

        treshholdmin.setMaximum(255);
        treshholdmin.setValue(0);
        jToolBar1.add(treshholdmin);

        treshholdmax.setMaximum(255);
        treshholdmax.setMinimum(50);
        treshholdmax.setValue(100);
        treshholdmax.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                treshholdmaxStateChanged(evt);
            }
        });
        jToolBar1.add(treshholdmax);

        btnAutoBin.setText("Auto Binarize");
        btnAutoBin.setFocusable(false);
        btnAutoBin.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAutoBin.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAutoBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoBinActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAutoBin);

        btnNegative.setText("Negative");
        btnNegative.setFocusable(false);
        btnNegative.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNegative.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNegativeActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNegative);

        jLabel3.setText("Color filter");
        jToolBar1.add(jLabel3);

        redFilterOp.setText("Red");
        redFilterOp.setFocusable(false);
        redFilterOp.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        redFilterOp.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        redFilterOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redFilterOpActionPerformed(evt);
            }
        });
        jToolBar1.add(redFilterOp);

        greenFilterOp.setText("Green");
        greenFilterOp.setFocusable(false);
        greenFilterOp.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        greenFilterOp.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        greenFilterOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenFilterOpActionPerformed(evt);
            }
        });
        jToolBar1.add(greenFilterOp);

        blueFilterOp.setText("Blue");
        blueFilterOp.setFocusable(false);
        blueFilterOp.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        blueFilterOp.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        blueFilterOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueFilterOpActionPerformed(evt);
            }
        });
        jToolBar1.add(blueFilterOp);

        jLabel4.setText("Contrast");
        jToolBar1.add(jLabel4);

        btnLogexpansion.setText("Log. expansion");
        btnLogexpansion.setFocusable(false);
        btnLogexpansion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLogexpansion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLogexpansion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogexpansionActionPerformed(evt);
            }
        });
        jToolBar1.add(btnLogexpansion);

        btnLinExpansion.setText("Lin. expansion");
        btnLinExpansion.setFocusable(false);
        btnLinExpansion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLinExpansion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLinExpansion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLinExpansionActionPerformed(evt);
            }
        });
        jToolBar1.add(btnLinExpansion);
        jToolBar1.add(expansionValue);

        btnConvolution.setText("Convolution");
        btnConvolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvolutionActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open Image");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        menuMatrix.setText("Matrix");
        menuMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMatrixActionPerformed(evt);
            }
        });
        jMenu2.add(menuMatrix);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConvolution)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConvolution)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            //FileDialog fd = new FileDialog(this);
            //fd.setVisible(true);
            // File f = new File(fd.getFile());
            originalImageRedim= ImageIO.read(f);
//            JFrame frame=new JFrame();
//            frame.setLayout(new FlowLayout());
//            frame.setSize(200,300);
//            JLabel lbl=new JLabel();
//            lbl.setSize(200, 300);
            originalImage = originalImageRedim.getScaledInstance(lbloriginal.getWidth(), lbloriginal.getHeight(),
        Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(originalImage);
            lbloriginal.setIcon(imageIcon);
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        
        
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnGrayScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrayScaleActionPerformed
        openResult(Operations.Binarize.Grayscale(originalImageRedim));
    }//GEN-LAST:event_btnGrayScaleActionPerformed

    private void btnBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinActionPerformed
        openResult(Operations.Binarize.BinarizeTreshold(originalImageRedim, treshholdmax.getValue(), treshholdmin.getValue()));
    }//GEN-LAST:event_btnBinActionPerformed

    private void btnBinRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBinRGBActionPerformed
        openResult(Operations.Binarize.BinarizeRGB(originalImageRedim, treshholdmax.getValue(), treshholdmin.getValue()));
    }//GEN-LAST:event_btnBinRGBActionPerformed

    private void btnAutoBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoBinActionPerformed
        openResult(Operations.Binarize.AutoBinarize(originalImageRedim));
    }//GEN-LAST:event_btnAutoBinActionPerformed

    private void btnNegativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNegativeActionPerformed
             openResult(Operations.ColorOp.Negative(originalImageRedim));
    }//GEN-LAST:event_btnNegativeActionPerformed

    private void btnLogexpansionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogexpansionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLogexpansionActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        try {
            originalImageRedim = ImageIO.read(f);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnResetActionPerformed

    private void treshholdmaxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_treshholdmaxStateChanged
        
    }//GEN-LAST:event_treshholdmaxStateChanged

    private void btncalculateHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncalculateHistogramActionPerformed
        calculateHistogram();
        
    }//GEN-LAST:event_btncalculateHistogramActionPerformed

    private void blueFilterOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueFilterOpActionPerformed
        try {
            //if(blueFilterOp.isSelected())
            //    openResult(Operations.ColorOp.BlueFilter(originalImageRedim));
            originalImageRedim = ImageIO.read(f);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        openResult(Operations.ColorOp.RGBFilter(originalImageRedim, redFilterOp.isSelected(),  greenFilterOp.isSelected(),  blueFilterOp.isSelected()));
    }//GEN-LAST:event_blueFilterOpActionPerformed

    private void redFilterOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redFilterOpActionPerformed
        try {
            //if(redFilterOp.isSelected())
            //    openResult(Operations.ColorOp.RedFilter(originalImageRedim));
            originalImageRedim = ImageIO.read(f);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        openResult(Operations.ColorOp.RGBFilter(originalImageRedim, redFilterOp.isSelected(),  greenFilterOp.isSelected(),  blueFilterOp.isSelected()));
    }//GEN-LAST:event_redFilterOpActionPerformed

    private void greenFilterOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenFilterOpActionPerformed
        try {
            //if(greenFilterOp.isSelected())
            //    openResult(Operations.ColorOp.GreenFilter(originalImageRedim));
            originalImageRedim = ImageIO.read(f);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        openResult(Operations.ColorOp.RGBFilter(originalImageRedim, redFilterOp.isSelected(),  greenFilterOp.isSelected(),  blueFilterOp.isSelected()));
    }//GEN-LAST:event_greenFilterOpActionPerformed

    private void btnLinExpansionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLinExpansionActionPerformed
        openResult(Operations.Contrast_Brightness.linealExpansion(originalImageRedim, expansionValue.getValue()));
    }//GEN-LAST:event_btnLinExpansionActionPerformed

    private void menuMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMatrixActionPerformed
       this.kernel = new double[3][3];
     
        MatrixPanel mp = new MatrixPanel(this.kernel,this.kernelDiv);
        mp.setVisible(true);
        mp.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        System.out.println();
        
    }//GEN-LAST:event_menuMatrixActionPerformed

    private void btnConvolutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvolutionActionPerformed
    System.out.println("values m: "+this.kernel[0][0]);
    this.kernelDiv = 1;
        openResult(Matrix.applyKernel(originalImageRedim, this.kernel,this.kernelDiv));
    }//GEN-LAST:event_btnConvolutionActionPerformed
    public void setMatrix(double[][] m){
        //double[][] valueM = m;
        //Matrix.applyKernel(originalImageRedim, this.kernel);
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox blueFilterOp;
    private javax.swing.JButton btnAutoBin;
    private javax.swing.JButton btnBin;
    private javax.swing.JButton btnBinRGB;
    private javax.swing.JButton btnConvolution;
    private javax.swing.JButton btnGrayScale;
    private javax.swing.JButton btnLinExpansion;
    private javax.swing.JButton btnLogexpansion;
    private javax.swing.JButton btnNegative;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btncalculateHistogram;
    private javax.swing.JSlider expansionValue;
    private javax.swing.JCheckBox greenFilterOp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lbloriginal;
    private javax.swing.JLabel lblresult;
    private javax.swing.JMenuItem menuMatrix;
    private javax.swing.JCheckBox redFilterOp;
    private javax.swing.JSlider treshholdmax;
    private javax.swing.JSlider treshholdmin;
    // End of variables declaration//GEN-END:variables

    
    private void openResult(BufferedImage img){
        
            processedImage = img.getScaledInstance(lblresult.getWidth(), lblresult.getHeight(),
        Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(processedImage);
            lblresult.setIcon(imageIcon);
            
    }
    
    private void calculateHistogram(){
        Histogram h = new Histogram(originalImageRedim);
        int[] data = h.getHistogram();
        System.out.println("Mean: " + h.getMean()+" min:"+h.getMin()+" max: "+h.getMax()+" n: "+h.getNpixels());
        System.out.println("Median: " + h.getMedian()+" Mode:"+h.getMode());
        
    }
  
}
